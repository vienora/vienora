'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  TrendingUp,
  TrendingDown,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Clock,
  Shield,
  BarChart3,
  Users,
  AlertCircle
} from 'lucide-react';

interface SupplierMetrics {
  supplierId: string;
  supplierName: string;
  totalOrders: number;
  successfulOrders: number;
  cancelledOrders: number;
  averageShippingTime: number;
  qualityScore: number;
  customerSatisfaction: number;
  lastUpdated: string;
  responseTime: number;
  returnRate: number;
  onTimeDelivery: number;
  priceCompetitiveness: number;
  inventoryAccuracy: number;
}

interface SupplierIncident {
  id: string;
  supplierId: string;
  orderId: string;
  type: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  reportedAt: string;
  resolvedAt?: string;
  impact: number;
}

interface BlacklistEntry {
  supplierId: string;
  supplierName: string;
  reason: string;
  blacklistedAt: string;
  blacklistedBy: string;
  severity: 'warning' | 'suspended' | 'banned';
  expiresAt?: string;
  autoGenerated: boolean;
}

export default function SupplierDashboard() {
  const [overview, setOverview] = useState<any>(null);
  const [supplierTiers, setSupplierTiers] = useState<any>(null);
  const [blacklistEntries, setBlacklistEntries] = useState<BlacklistEntry[]>([]);
  const [recentIncidents, setRecentIncidents] = useState<SupplierIncident[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    loadSupplierData();
  }, []);

  const loadSupplierData = async () => {
    try {
      setLoading(true);

      // Load overview data
      const overviewResponse = await fetch('/api/suppliers');
      if (overviewResponse.ok) {
        const overviewData = await overviewResponse.json();
        setOverview(overviewData.data);
      }

      // Load supplier tiers
      const tiersResponse = await fetch('/api/suppliers?action=tiers');
      if (tiersResponse.ok) {
        const tiersData = await tiersResponse.json();
        setSupplierTiers(tiersData.data);
      }

      // Load blacklist
      const blacklistResponse = await fetch('/api/suppliers?action=blacklist');
      if (blacklistResponse.ok) {
        const blacklistData = await blacklistResponse.json();
        setBlacklistEntries(blacklistData.data);
      }

      // Load recent incidents
      const incidentsResponse = await fetch('/api/suppliers?action=incidents&days=30');
      if (incidentsResponse.ok) {
        const incidentsData = await incidentsResponse.json();
        setRecentIncidents(incidentsData.data);
      }

    } catch (error) {
      console.error('Failed to load supplier data:', error);
    } finally {
      setLoading(false);
    }
  };

  const simulateSupplierData = async (supplierId: string) => {
    try {
      const response = await fetch('/api/suppliers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'simulate_performance_data',
          supplierId
        })
      });

      if (response.ok) {
        await loadSupplierData(); // Refresh data
        alert(`Simulated performance data for ${supplierId}`);
      }
    } catch (error) {
      console.error('Failed to simulate data:', error);
    }
  };

  const removeFromBlacklist = async (supplierId: string) => {
    try {
      const response = await fetch('/api/suppliers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'remove_blacklist',
          supplierId
        })
      });

      if (response.ok) {
        await loadSupplierData(); // Refresh data
        alert(`Removed ${supplierId} from blacklist`);
      }
    } catch (error) {
      console.error('Failed to remove from blacklist:', error);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 85) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  if (loading) {
    return (
      <div className="p-6">
        <div className="grid gap-4 md:grid-cols-3">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-gray-200 rounded mb-2"></div>
                <div className="h-8 bg-gray-200 rounded"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Supplier Performance Dashboard</h1>
          <p className="text-gray-600">Monitor and manage supplier relationships and quality</p>
        </div>
        <Button onClick={() => loadSupplierData()}>
          Refresh Data
        </Button>
      </div>

      {/* Overview Stats */}
      {overview && (
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Suppliers</p>
                  <p className="text-2xl font-bold">{overview.totalSuppliers}</p>
                </div>
                <Users className="w-8 h-8 text-blue-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Active Suppliers</p>
                  <p className="text-2xl font-bold text-green-600">{overview.activeSuppliers}</p>
                </div>
                <CheckCircle className="w-8 h-8 text-green-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Blacklisted</p>
                  <p className="text-2xl font-bold text-red-600">{overview.blacklistedSuppliers}</p>
                </div>
                <XCircle className="w-8 h-8 text-red-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Recent Issues</p>
                  <p className="text-2xl font-bold text-orange-600">{overview.recentIncidents}</p>
                </div>
                <AlertTriangle className="w-8 h-8 text-orange-600" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">Performance Tiers</TabsTrigger>
          <TabsTrigger value="blacklist">Blacklist Management</TabsTrigger>
          <TabsTrigger value="incidents">Recent Incidents</TabsTrigger>
          <TabsTrigger value="testing">Testing Tools</TabsTrigger>
        </TabsList>

        <TabsContent value="overview">
          {supplierTiers && (
            <div className="space-y-6">
              {/* Elite Suppliers */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-green-600" />
                    Elite Suppliers ({supplierTiers.elite.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {supplierTiers.elite.length > 0 ? (
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                      {supplierTiers.elite.map((supplier: SupplierMetrics) => (
                        <Card key={supplier.supplierId} className="border-green-200">
                          <CardContent className="p-4">
                            <h3 className="font-semibold">{supplier.supplierName}</h3>
                            <div className="space-y-2 mt-2">
                              <div className="flex justify-between text-sm">
                                <span>Quality Score:</span>
                                <span className="text-green-600 font-medium">{supplier.qualityScore.toFixed(1)}</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>On-Time Delivery:</span>
                                <span className="text-green-600 font-medium">{supplier.onTimeDelivery.toFixed(1)}%</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>Customer Satisfaction:</span>
                                <span className="text-green-600 font-medium">{supplier.customerSatisfaction.toFixed(1)}/5</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>Total Orders:</span>
                                <span className="font-medium">{supplier.totalOrders}</span>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500">No elite suppliers yet. Performance data needed.</p>
                  )}
                </CardContent>
              </Card>

              {/* Good Suppliers */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="w-5 h-5 text-yellow-600" />
                    Good Suppliers ({supplierTiers.good.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {supplierTiers.good.length > 0 ? (
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                      {supplierTiers.good.map((supplier: SupplierMetrics) => (
                        <Card key={supplier.supplierId} className="border-yellow-200">
                          <CardContent className="p-4">
                            <h3 className="font-semibold">{supplier.supplierName}</h3>
                            <div className="space-y-2 mt-2">
                              <div className="flex justify-between text-sm">
                                <span>Quality Score:</span>
                                <span className="text-yellow-600 font-medium">{supplier.qualityScore.toFixed(1)}</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>On-Time Delivery:</span>
                                <span className="text-yellow-600 font-medium">{supplier.onTimeDelivery.toFixed(1)}%</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>Total Orders:</span>
                                <span className="font-medium">{supplier.totalOrders}</span>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500">No good suppliers. Performance data needed.</p>
                  )}
                </CardContent>
              </Card>

              {/* Poor Suppliers */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingDown className="w-5 h-5 text-red-600" />
                    Poor Performers ({supplierTiers.poor.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {supplierTiers.poor.length > 0 ? (
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                      {supplierTiers.poor.map((supplier: SupplierMetrics) => (
                        <Card key={supplier.supplierId} className="border-red-200">
                          <CardContent className="p-4">
                            <h3 className="font-semibold">{supplier.supplierName}</h3>
                            <div className="space-y-2 mt-2">
                              <div className="flex justify-between text-sm">
                                <span>Quality Score:</span>
                                <span className="text-red-600 font-medium">{supplier.qualityScore.toFixed(1)}</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>Return Rate:</span>
                                <span className="text-red-600 font-medium">{supplier.returnRate.toFixed(1)}%</span>
                              </div>
                              <div className="flex justify-between text-sm">
                                <span>Total Orders:</span>
                                <span className="font-medium">{supplier.totalOrders}</span>
                              </div>
                            </div>
                            <Alert className="mt-2">
                              <AlertTriangle className="w-4 h-4" />
                              <AlertDescription className="text-xs">
                                Poor performance detected. Consider review.
                              </AlertDescription>
                            </Alert>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500">No poor performers identified.</p>
                  )}
                </CardContent>
              </Card>
            </div>
          )}
        </TabsContent>

        <TabsContent value="blacklist">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5 text-red-600" />
                Blacklisted Suppliers
              </CardTitle>
            </CardHeader>
            <CardContent>
              {blacklistEntries.length > 0 ? (
                <div className="space-y-4">
                  {blacklistEntries.map((entry: BlacklistEntry) => (
                    <Card key={entry.supplierId} className="border-red-200">
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between">
                          <div className="space-y-2">
                            <h3 className="font-semibold">{entry.supplierName}</h3>
                            <p className="text-sm text-gray-600">{entry.reason}</p>
                            <div className="flex items-center gap-2">
                              <Badge className={getSeverityColor(entry.severity)}>
                                {entry.severity}
                              </Badge>
                              {entry.autoGenerated && (
                                <Badge variant="outline">Auto-Generated</Badge>
                              )}
                            </div>
                            <p className="text-xs text-gray-500">
                              Blacklisted on {new Date(entry.blacklistedAt).toLocaleDateString()} by {entry.blacklistedBy}
                            </p>
                            {entry.expiresAt && (
                              <p className="text-xs text-gray-500">
                                Expires: {new Date(entry.expiresAt).toLocaleDateString()}
                              </p>
                            )}
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => removeFromBlacklist(entry.supplierId)}
                          >
                            Remove
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No suppliers currently blacklisted.</p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="incidents">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertCircle className="w-5 h-5 text-orange-600" />
                Recent Incidents (Last 30 Days)
              </CardTitle>
            </CardHeader>
            <CardContent>
              {recentIncidents.length > 0 ? (
                <div className="space-y-4">
                  {recentIncidents.slice(0, 10).map((incident: SupplierIncident) => (
                    <Card key={incident.id} className="border-orange-200">
                      <CardContent className="p-4">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <h3 className="font-semibold">{incident.supplierId}</h3>
                            <Badge className={getSeverityColor(incident.severity)}>
                              {incident.severity}
                            </Badge>
                          </div>
                          <p className="text-sm font-medium">{incident.type.replace('_', ' ').toUpperCase()}</p>
                          <p className="text-sm text-gray-600">{incident.description}</p>
                          <div className="flex items-center justify-between text-xs text-gray-500">
                            <span>Order: {incident.orderId}</span>
                            <span>{new Date(incident.reportedAt).toLocaleDateString()}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-xs">Impact:</span>
                            <div className="flex">
                              {[...Array(10)].map((_, i) => (
                                <div
                                  key={i}
                                  className={`w-2 h-2 rounded-full mr-1 ${
                                    i < incident.impact ? 'bg-red-500' : 'bg-gray-200'
                                  }`}
                                />
                              ))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No recent incidents reported.</p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="testing">
          <Card>
            <CardHeader>
              <CardTitle>Testing & Simulation Tools</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Alert>
                <AlertTriangle className="w-4 h-4" />
                <AlertDescription>
                  These tools simulate supplier performance data for testing the blacklisting system.
                </AlertDescription>
              </Alert>

              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardContent className="p-4">
                    <h3 className="font-semibold mb-2">Simulate Printful Performance</h3>
                    <p className="text-sm text-gray-600 mb-4">
                      Generate realistic performance data for Printful supplier testing.
                    </p>
                    <Button onClick={() => simulateSupplierData('printful')}>
                      Simulate Printful Data
                    </Button>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <h3 className="font-semibold mb-2">Simulate Spocket Performance</h3>
                    <p className="text-sm text-gray-600 mb-4">
                      Generate realistic performance data for Spocket supplier testing.
                    </p>
                    <Button onClick={() => simulateSupplierData('spocket')}>
                      Simulate Spocket Data
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
